swagger: '2.0'
info:
  description: EW REST API for SSO - Authentication Service
  version: '1.0'
  termsOfService: 'http://www.karumien.com/terms/'
  contact:
    email: info@karumien.com
  title: Authentication Service
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /api/v1/iam
schemes:
  - http
paths:
  /auth/publicKey:
    get:
      summary: Retrieve Realm PublicKey
      operationId: publicKey
      produces:
        - text/plain
      responses:
        200:
          description: Retrieve PublicKey of Realm
  /auth/password/generate:
    get:
      summary: "Returns New Generated Password dependent on Policy definition"
      operationId: "generatePassword"
      produces:
        - text/plain
      responses:
        '200':
          description: "Generated New Password"
  /auth/password/policy:
    get:
      summary: "Returns Password Policy for Identities"
      description: "Method for get Identity's password policy"
      operationId: "getPasswordPolicy"
      responses:
        '200':
          description: "Password Policy Settings"
          schema:
            $ref: '#/definitions/Policy' 
  /auth/login:
    post:
      summary: Retrieve Authorization Token
      description: Authenticate and get Token
      operationId: login
#      consumes:
#        - application/x-www-form-urlencoded
      parameters:
        - in: body
          name: user
          description: The user to create
          schema:
            $ref: '#/definitions/AuthorizationRequest'
      responses:
        '200':
          description: Login Successful
          schema:
            $ref: '#/definitions/AuthorizationResponse'        
        '401':
          description: Unauthorized - Invalid credentials { errno = 401 }
          schema:
            $ref: '#/definitions/ErrorMessage'
            example:
              errno: 401
              errcode: 'CLIENT_ERROR'
              errmsg: Invalid user credentials
        '422':
          description: "Can't login - Account not fully set up (reset password needed, ...) { errno = 400 }"
          schema:
            $ref: '#/definitions/ErrorMessage'
            example:
              errno: 400
              errcode: 'CLIENT_ERROR'
              errmsg: Account not fully set up
  /auth/logout:
    post:
      summary: Logout of Authenticated User
      description: Logout of Authenticated user, only grant_type refresh_token is supported.
      operationId: logout
#      consumes:
#        - application/x-www-form-urlencoded
      parameters:
        - in: body
          name: user
          description: The user to create
          schema:
            $ref: '#/definitions/AuthorizationRequest'
      responses:
        204:
          description: "Successful Logout"
definitions:
  GrantType:
    type: string
    description: Type of Bearer
    enum:
      - password
      - client_credentials
      - refresh_token
      - pin
      - impersonate
  AuthorizationRequest:
    type: object
    required:
      - grant_type
    properties:
      grant_type:
        $ref: '#/definitions/GrantType'
      username:
        type: string
        maxLength: 100
        description: Identity ID of user - required for grant_type of type 'password' or 'pin' or in 'impersonate' use as requested user's userame.
      password:
        type: string
        maxLength: 100
        description: User's password - required for grant_type of type 'password'.
      client_id:
        type: string
        maxLength: 250
        description: Client Id - required for grant_type of type 'client_credentials'.
      client_secret:
        type: string
        maxLength: 250
        description: Client Secret - required for grant_type of type 'client_credentials'.
      refresh_token:
        type: string
        maxLength: 4000
        description: Refresh Token for Access Token renewal process - required for grant_type of type 'refresh_token' or 'impersonate'.
      pin:
        type: string
        maxLength: 10
        description: Driver's pin - required for grant_type of type 'pin'.
    example:
      password:
        grant_type: password
        identity: user@ew.com
        secret: heslo123
      client_credentials:
        grant_type: client_credentials
        client_id: admin-cli
        client_secret: uewrutzewre
      refresh_token:
        grant_type: refresh_token
        refresh_token: uyewiryerweiruew
  AuthorizationResponse:
      type: object
      required:
        - access_token
        - refresh_token
        - expires_in
        - token_type
      properties:
        access_token:
          type: string
          maxLength: 4000
          description: Access Token Representation
        refresh_token:
          type: string
          maxLength: 4000
          description: Refresh Token Representation
        expires_in:
          type: integer
          format: int64
          description: Access Token expiration in seconds
        refresh_expires_in:
          type: integer
          format: int64
          description: Refresh Token expiration in seconds
        token_type:
          type: string
          description: Base type of token
      example:
        access_token: rewrsthhgfh
        refresh_token: a3sdwer3twe
        expires_in: 3600
        token_type: Bearer
  Policy:
    type: object
    description: "Configuration object for Password Policy"
    properties:
      value:
        type: string
        description: "Full policy description"
      minSpecialChars:
        type: integer
        description: "Minimum use special chars in password"
        example: "1"       
      minUpperCase: 
        type: integer
        description: "Minimum use upper case chars in password"
        example: "1"
      minLength:
        type: integer
        description: "Minimum password length"
        example: "8"
      notUseUsername:
        type: boolean
        description: "Use username in password"
        example: "true"
      passwordHistory:
        type: integer
        description: "Use same password from history"
        example: "3"
      minLowerCase:
        type: integer
        description: "Minimum use lower case chars in password"
        example: "1"
      minDigits:
        type: integer
        description: "Minimum use digits in password"
        example: "1"
      passwordExpireDays:
        type: integer
        description: "Password expire in days"
        example: "365"
      hashAlgorithm:
        type: string
        description: "Hash algorithm for password encode"
        example: "pbkdf2-sha256"
      hashIterations:
        type: integer
        description: "Hash iterations for password encode"
        example: "27500"
      passwordBlacklist:
        type: boolean
        description: "Use blacklist for passwords"
      regexPattern:
        type: string
        description: "REGEX pattern for password validation"
        example: ".*"
      translation:
        type: string
        description: "Policy translation"
        maxLength: 255